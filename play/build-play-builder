#!/usr/bin/env ruby

PROJECTS_TO_BUILD = %w(flowcommerce/experience flowcommerce/catalog flowcommerce/fulfillment flowcommerce/label flowcommerce/shopify)

ORG = "flowdocker"

tag = ARGV.shift.to_s.strip

if tag == ""
  puts "ERROR: Missing tag"
  exit(1)
end

play_builder_image = "%s/%s" % [ORG, "play_builder"]
play_builder_tag = "%s:%s" % [play_builder_image, tag]

refresh_build_caches = true

def run(command)
  puts "  %s" % command
  system(command)
end

puts ""
puts "Starting build of %s" % play_builder_tag

if refresh_build_caches

  base_dir = File.expand_path(File.join(File.dirname(__FILE__), '/../../docker-build-play-builder.tmp'))
  run("rm -rf #{base_dir}")
  run("mkdir -p #{base_dir}")

  PROJECTS_TO_BUILD.map do |pair|
    repo, project = pair.split("/", 2)
    if project.nil?
      raise "Project[%s] could not be parsed" % pair
    end
    dir = File.join(base_dir, project)

    puts ""
    puts "Building #{pair} in #{dir}"
    Dir.chdir(base_dir) do
      run("git clone --depth 1 git@github.com:#{pair}")
    end

    Dir.chdir(dir) do
      run("sbt compile")
    end
  end

end

# Build in a tmp directory to avoid adding anything unnecessary into
# the context.
tmp_dir = "/tmp/docker.play.#{Process.pid}"
begin
  run("mkdir #{tmp_dir}")
  dockerfile = "#{tmp_dir}/Dockerfile"
  File.open(dockerfile, "w") do |out|
    out << IO.read("Dockerfile.play_builder").strip % tag
  end

  Dir.chdir(tmp_dir) do
    run("cp -R $HOME/.ivy2 .")
    run("rm -f .ivy2/.*")
    run("cp -R $HOME/.sbt .")
    run("rm -f .sbt/.*")
    run("docker build --no-cache -t %s ." % play_builder_tag)
  end

  run("docker push %s" % play_builder_tag)
ensure
  run("rm -rf #{tmp_dir}")
end

puts ""
puts "Completed build of %s" % play_builder_tag
