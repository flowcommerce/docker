#!/usr/bin/env ruby

PROJECTS_TO_BUILD = %w(fulfillment user organization)

ORG = "flowcommerce"
app = `pwd`.strip.split("/").last
latest = `sem-info tag latest`.strip
base_image = "%s/%s" % [ORG, app]
tag = "%s:%s" % [base_image, latest]

def run(command)
  puts "  %s" % command
  system(command)
end

puts "Checking if docker image %s exists" % tag

if run("docker pull %s > /dev/null 2>&1" % tag)
  puts ""
  puts "Docker image %s already exists" % tag
else
  puts ""
  puts "Docker image %s not found. Starting build" % tag

  base_dir = File.expand_path(File.join(File.dirname(__FILE__), '/../../'))

  dirs = PROJECTS_TO_BUILD.map do |project|
    dir = File.join(base_dir, project)
    if !File.exists?(dir)
      puts "ERROR: Could not find local directory[#{dir}]"
      exit(1)
    end
    dir
  end

  dirs.each do |dir|
    puts ""
    puts "Building #{dir}"
    Dir.chdir(dir) do
      run("git pull --rebase")
      run("sbt compile")
    end
  end

  system("cp -R +/.ivy2 .")
  system("cp -R +/.sbt .")
  
  run("docker build -t %s ." % tag)
  run("docker push %s" % tag)
  run("docker tag -f %s %s:%s" % [tag, base_image, "latest"])
  run("docker push %s:%s" % [base_image, "latest"])
end

# Now update the example in the README

puts ""
puts "Updating README.md to include latest version[%s]" % latest
tmp = "/tmp/docker.readme.#{Process.pid}.tmp"
found = false
changed = false
begin
  File.open(tmp, "w") do |out|
    IO.readlines("../README.md").each do |l|
      if md = l.match(/from flowcommerce\/play:(.+)/i)
        found = true
        if changed = (latest != md[1])
           l.sub!(md[1], latest)
        end
      end
      out << l
    end
  end

  if found
    if changed
      run("git commit -m 'Update version of flowcommerce/play image to #{latest}' ../README.md")
      run("git push origin master")
    else
      puts "  README was not updated as it already referenced version #{latest}"
    end
  else
    puts "** WARNING: Could not find FROM flowcommerce/play in ../README.md - update manually to add the latest version"
  end

ensure
  if File.exists?(tmp)
    File.delete(tmp)
  end
end
